name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr libtesseract-dev
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run linting
        run: |
          pip install flake8 black
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check . || true
      
      - name: Run tests with coverage
        run: |
          python -m pytest tests.py --cov=main --cov-report=xml --cov-report=term-missing -v
        env:
          PYTHONPATH: .
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: coverage.xml

  docker-backend:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Build backend Docker image
        run: |
          docker build -t multimodal-backend:latest -f Dockerfile .
      
      - name: Test backend container
        run: |
          docker run --name test-backend -d -p 8000:8000 multimodal-backend:latest
          sleep 30
          curl -f http://localhost:8000/health || exit 1
          docker stop test-backend

  docker-frontend:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Build frontend Docker image
        run: |
          docker build -t multimodal-frontend:latest -f Dockerfile.frontend .
      
      - name: Test frontend container
        run: |
          docker run --name test-frontend -d -p 8501:8501 multimodal-frontend:latest
          sleep 30
          curl -f http://localhost:8501/_stcore/health || exit 1
          docker stop test-frontend

  docker-compose:
    runs-on: ubuntu-latest
    needs: [docker-backend, docker-frontend]
    steps:
      - uses: actions/checkout@v4
      
      - name: Test Docker Compose
        run: |
          docker compose up -d --build
          sleep 60
          curl -f http://localhost:8000/health
          curl -f http://localhost:8501/_stcore/health
          docker compose down

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-compose, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "ðŸš€ Ready for staging deployment"
          echo "Backend image: multimodal-backend:latest"
          echo "Frontend image: multimodal-frontend:latest"
          echo "Docker Compose: docker-compose.yml"  
