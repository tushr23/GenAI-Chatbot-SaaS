name: Enterprise CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt

    - name: Lint with flake8
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        cd backend
        black --check --diff .

    - name: Test with pytest (99.5% coverage enforced)
      env:
        HUGGINGFACEHUB_API_TOKEN: ${{ secrets.HUGGINGFACEHUB_API_TOKEN || 'test_token' }}
        API_KEY: test_key_for_ci
        RATE_LIMIT_REQUESTS: 5
        REQUEST_SIZE_LIMIT_BYTES: 1024
      run: |
        cd backend
        pytest -v --cov=. --cov-report=term-missing --cov-fail-under=99.5

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image (single-platform, for scanning)
      run: |
        cd backend
        docker buildx build --load -t genai-chatbot:${{ github.sha }} --file Dockerfile .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'genai-chatbot:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results (best-effort)
      if: always()
      run: |
        if [ -f trivy-results.sarif ]; then
          echo "Uploading SARIF results..."
          # Upload; if it fails due to integration permissions, don't fail the job
          gh api --method POST -H "Content-Type: application/sarif+json" /repos/${{ github.repository }}/code-scanning/sarifs -f sarif=@trivy-results.sarif || echo "SARIF upload failed (integration permission), continuing"
        else
          echo "No SARIF results generated"
        fi

  docker-build:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and smoke test services
      env:
        HUGGINGFACEHUB_API_TOKEN: test_token
      run: |
        cp .env.example .env
        sed -i "s|your_hf_token_here|${HUGGINGFACEHUB_API_TOKEN}|g" .env
        echo "MODEL_ID=${MODEL_ID:-HuggingFaceH4/zephyr-7b-beta}" >> .env
        docker compose build
        docker compose up -d
        sleep 15

        # Health checks
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/metrics || exit 1
        curl -f http://localhost:8000/readiness || echo "Expected 503 for missing real token"

        # API smoke test
        curl -X POST http://localhost:8000/v1/chat \
          -H "Content-Type: application/json" \
          -d '{"messages": [{"role": "user", "content": "test"}]}' || echo "Expected generation failure"

        docker compose down

    - name: Build multi-platform images (on main)
      if: github.ref == 'refs/heads/main'
      run: |
        # Use buildx and push to the default registry if available. When running in CI without registry
        # credentials this will still build and cache but we explicitly request push only when DOCKERHUB_USERNAME is set.
        set -e
        if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_PASSWORD }}" ]; then
          echo "Logging into Docker registry"
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker buildx build --platform linux/amd64,linux/arm64 --push -t ${DOCKERHUB_USERNAME:-genai}/genai-chatbot:latest -f backend/Dockerfile ./backend
          docker buildx build --platform linux/amd64,linux/arm64 --push -t ${DOCKERHUB_USERNAME:-genai}/genai-chatbot-frontend:latest -f frontend/Dockerfile.frontend ./frontend
        else
          echo "No registry credentials provided; building locally with --load to populate the buildx cache"
          docker buildx build --platform linux/amd64,linux/arm64 --load -t genai-chatbot:latest -f backend/Dockerfile ./backend
          docker buildx build --platform linux/amd64,linux/arm64 --load -t genai-chatbot-frontend:latest -f frontend/Dockerfile.frontend ./frontend
        fi
